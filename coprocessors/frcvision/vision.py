# Import the camera server
from cscore import CameraServer
# Import OpenCV and NumPy
import cv2
import numpy
import math
from enum import Enum
import traceback
from networktables import NetworkTablesInstance
import time as tm
import RPi.GPIO as GPIO

class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__hsl_threshold_hue = [50.08633093525181, 90.60068259385665]
        self.__hsl_threshold_saturation = [100.96762589928056, 255.0]
        self.__hsl_threshold_luminance = [80.22841726618702, 200.0]

        self.hsl_threshold_output = None

        self.__find_contours_input = self.hsl_threshold_output
        self.__find_contours_external_only = False

        self.find_contours_output = None

        self.__filter_contours_contours = self.find_contours_output
        self.__filter_contours_min_area = 57.0
        self.__filter_contours_min_perimeter = 100.0
        self.__filter_contours_min_width = 40.0
        self.__filter_contours_max_width = 1000.0
        self.__filter_contours_min_height = 20.0
        self.__filter_contours_max_height = 1000.0
        self.__filter_contours_solidity = [0, 100]
        self.__filter_contours_max_vertices = 1000000.0
        self.__filter_contours_min_vertices = 0.0
        self.__filter_contours_min_ratio = 0.0
        self.__filter_contours_max_ratio = 1000.0

        self.filter_contours_output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step HSL_Threshold0:
        self.__hsl_threshold_input = source0
        (self.hsl_threshold_output) = self.__hsl_threshold(self.__hsl_threshold_input, self.__hsl_threshold_hue, self.__hsl_threshold_saturation, self.__hsl_threshold_luminance)

        # Step Find_Contours0:
        self.__find_contours_input = self.hsl_threshold_output
        (self.find_contours_output) = self.__find_contours(self.__find_contours_input, self.__find_contours_external_only)

        # Step Filter_Contours0:
        self.__filter_contours_contours = self.find_contours_output
        (self.filter_contours_output) = self.__filter_contours(self.__filter_contours_contours, self.__filter_contours_min_area, self.__filter_contours_min_perimeter, self.__filter_contours_min_width, self.__filter_contours_max_width, self.__filter_contours_min_height, self.__filter_contours_max_height, self.__filter_contours_solidity, self.__filter_contours_max_vertices, self.__filter_contours_min_vertices, self.__filter_contours_min_ratio, self.__filter_contours_max_ratio)


    @staticmethod
    def __hsl_threshold(input, hue, sat, lum):
        """Segment an image based on hue, saturation, and luminance ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max luminance.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HLS)
        return cv2.inRange(out, (hue[0], lum[0], sat[0]),  (hue[1], lum[1], sat[1]))

    @staticmethod
    def __find_contours(input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if(external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        im2, contours, hierarchy =cv2.findContours(input, mode=mode, method=method)
        return contours

    @staticmethod
    def __filter_contours(input_contours, min_area, min_perimeter, min_width, max_width,
                        min_height, max_height, solidity, max_vertex_count, min_vertex_count,
                        min_ratio, max_ratio):
        """Filters out contours that do not meet certain criteria.
        Args:
            input_contours: Contours as a list of numpy.ndarray.
            min_area: The minimum area of a contour that will be kept.
            min_perimeter: The minimum perimeter of a contour that will be kept.
            min_width: Minimum width of a contour.
            max_width: MaxWidth maximum width.
            min_height: Minimum height.
            max_height: Maximimum height.
            solidity: The minimum and maximum solidity of a contour.
            min_vertex_count: Minimum vertex Count of the contours.
            max_vertex_count: Maximum vertex Count.
            min_ratio: Minimum ratio of width to height.
            max_ratio: Maximum ratio of width to height.
        Returns:
            Contours as a list of numpy.ndarray.
        """
        output = []
        for contour in input_contours:
            x,y,w,h = cv2.boundingRect(contour)
            if (w < min_width or w > max_width):
                continue
            if (h < min_height or h > max_height):
                continue
            area = cv2.contourArea(contour)
            if (area < min_area):
                continue
            if (cv2.arcLength(contour, True) < min_perimeter):
                continue
            hull = cv2.convexHull(contour)
            solid = 100 * area / cv2.contourArea(hull)
            if (solid < solidity[0] or solid > solidity[1]):
                continue
            if (len(contour) < min_vertex_count or len(contour) > max_vertex_count):
                continue
            ratio = (float)(w) / h
            if (ratio < min_ratio or ratio > max_ratio):
                continue
            output.append(contour)
        return output






def main(ntinst):

    ledControlPin = 18
    GPIO.setmode( GPIO.BOARD )
    GPIO.setup( ledControlPin, GPIO.OUT )

    cs = CameraServer.getInstance()

    #cs.enableLogging()

    # Capture from the first USB Camera on the system

    #width  = 1280 / 2
    #height = 720 / 2

    width  = 320
    height = 240

    camera = cs.startAutomaticCapture()
    camera.setResolution(width, height)
    # Get a CvSink. This will capture images from the camera
    camera.setExposureManual(10); 
    camera.setWhiteBalanceManual(10000); 

    cvSink = cs.getVideo()
    # (optional) Setup a CvSource. This will send images back to the Dashboard

    #outputStream = cs.putVideo("Name", width, height)
    # Allocating new images is very expensive, always try to preallocate

    pipeline = GripPipeline()

    tm.sleep(1)

    xCoordTable   = ntinst.getTable( 'targetCoords' )
    timesTable    = ntinst.getTable( 'loopTimes' )
    ledStateTable = ntinst.getTable( 'ledState' )
    #xCoordValue = xCoordTable.getEntry( 'val' )
    #print( dir( xCoordTable ) )

    img = numpy.zeros(shape=(height, width, 3), dtype=numpy.uint8)

    numLoopTimes = 10
    loopTimes    = [ 0 for a in range( numLoopTimes ) ]
    processTimes = [ 0 for a in range( numLoopTimes ) ]
    grabTimes    = [ 0 for a in range( numLoopTimes ) ]
    idx = 0
    lastLoopTime = tm.time()

    lastLedTime = tm.time()
    ledOn = False

    GPIO.output( ledControlPin, GPIO.HIGH )
    while True:

      try:
          if ledStateTable.getNumber( 'val', 0 ) > 0:
             GPIO.output( ledControlPin, GPIO.HIGH )
          else:
             GPIO.output( ledControlPin, GPIO.LOW )


         #currentLoopTime = tm.time()
         #loopTimes[idx] = currentLoopTime - lastLoopTime
         #lastLoopTime = currentLoopTime

         #if ( currentLoopTime - lastLedTime ) > 2.0:
         #   if ledOn:
         #      GPIO.output( ledControlPin, GPIO.LOW )
         #      ledOn = False
         #   else:
         #      GPIO.output( ledControlPin, GPIO.HIGH )
         #      ledOn = True
         #   lastLedTime = currentLoopTime


          #print('Frame Loop')
          # Tell the CvSink to grab a frame from the camera and put it
          # in the source image. If there is an error notify the output.
          beforeGrab =  tm.time()
          time, img = cvSink.grabFrame(img)
          afterGrab =  tm.time()
          if time == 0:
              xCoordTable.putNumber( 'xVal', -1 )
              xCoordTable.putNumber( 'yVal', -1 )
              # Send the output the error.
              #outputStream.notifyError(cvSink.getError());
              # skip the rest of the current iteration
              continue


          pipeline.process( img ) 
          afterProcess =  tm.time()

          if len( pipeline.filter_contours_output ) > 0:
              #print( pipeline.filter_contours_output )

              #print( len(pipeline.find_contours_output) )
              try:
                  #print( pipeline.filter_contours_output )
                  rect = cv2.minAreaRect( pipeline.find_contours_output[0] )

                  box = cv2.boxPoints(rect)
                  box2 = numpy.int0( box )

                  rect = cv2.boundingRect( pipeline.filter_contours_output[0] )
                  box  = ( (           float(rect[0]),           float(rect[1]) ), 
                           (           float(rect[0]), float(rect[1] + rect[3]) ),
                           ( float(rect[0] + rect[2]), float(rect[1] + rect[3]) ),
                           ( float(rect[0] + rect[2]),           float(rect[1]) ),
                           )
                  box2 = numpy.int0( box )

                  #print( 'rect: {}'.format( box2 ) )
                  print( box2[0][0] )
                  print( box2[2][0] )

                  numToPut = ( box2[0][0] + box2[2][0] ) / 2
                  print( 'numToPut: {}'.format( numToPut ) )
                  xCoordTable.putNumber( 'xVal', numToPut )

                  numToPut = ( box2[0][1] + box2[2][1] ) / 2
                  xCoordTable.putNumber( 'yVal', numToPut )


                  #print( type( rect ) )
                  #print( type( box ) )

                  #print( rect )
                  #print( box )
                  #print( 'New' )
                  #print( box2 )
                  #print( type( box2[0][0] ) )

                  if False:
                    cv2.drawContours(img,[box2],0,(0,0,255),2)
                    cv2.line(
                        img,
                        ( int(rect[0] + rect[2] / 2), int(0) ),
                        ( int(rect[0] + rect[2] / 2), int(height) ),
                        (0, 255, 255),
                        int(3),
                        int(8),
                        int(0)
                    )

                    cv2.line(
                        img,
                        ( int(0),     int(rect[1] + rect[3] / 2) ),
                        ( int(width), int(rect[1] + rect[3] / 2) ),
                        (0, 255, 255),
                        int(3),
                        int(8),
                        int(0)
                    )



              except:
                  xCoordTable.putNumber( 'xVal', -1 )
                  xCoordTable.putNumber( 'yVal', -1 )
                  print( traceback.format_exc() )
                  tm.sleep(1)


          else:

              xCoordTable.putNumber( 'xVal', -1 )
              xCoordTable.putNumber( 'yVal', -1 )
              center = ( int(width / 2), int(height / 2) )
       
              cv2.circle(
                  img,
                  center,
                  int(width / 20),
                  (255, 0, 0),
                  int(3),
                  int(8)
              )

          #outputStream.putFrame( pipeline.hsl_threshold_output )

          #outputStream.putFrame( img )
      except:
        xCoordTable.putNumber( 'xVal', -1 )
        xCoordTable.putNumber( 'yVal', -1 )
        print( 'Main try block:' )
        print( traceback.format_exc() )

if __name__ == '__main__':

    # start NetworkTables
    ntinst = NetworkTablesInstance.getDefault()

    server = False
    team = 2227
    if server:
        print("Setting up NetworkTables server")
        ntinst.startServer()
    else:
        print("Setting up NetworkTables client for team {}".format(team))
        ntinst.startClientTeam(team)

    main(ntinst)
